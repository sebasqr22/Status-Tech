{"ast":null,"code":"/*! (c) 2020 Andrea Giammarchi */\n\nconst {\n  parse: $parse,\n  stringify: $stringify\n} = JSON;\nconst {\n  keys\n} = Object;\nconst Primitive = String; // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\nconst noop = (_, value) => value;\nconst primitives = value => value instanceof Primitive ? Primitive(value) : value;\nconst Primitives = (_, value) => typeof value === primitive ? new Primitive(value) : value;\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {\n      length\n    } = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({\n          k,\n          a: [input, parsed, tmp, $]\n        });\n      } else output[k] = $.call(output, k, tmp);\n    } else if (output[k] !== ignore) output[k] = $.call(output, k, value);\n  }\n  for (let {\n      length\n    } = lazy, i = 0; i < length; i++) {\n    const {\n      k,\n      a\n    } = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ? revive(input, new Set(), value, $) : value;\n  return $.call({\n    '': tmp\n  }, '', tmp);\n};\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ? (k, v) => k === '' || -1 < replacer.indexOf(k) ? v : void 0 : replacer || noop;\n  const known = new Map();\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({\n    '': value\n  }, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));","map":{"version":3,"names":["parse","$parse","stringify","$stringify","JSON","keys","Object","Primitive","String","primitive","ignore","object","noop","_","value","primitives","Primitives","revive","input","parsed","output","$","lazy","ke","length","y","k","tmp","has","add","push","a","call","i","apply","set","known","index","text","reviver","map","Set","replacer","space","v","indexOf","Map","firstRun","replace","join","key","after","get","toJSON","any","fromJSON"],"sources":["/Users/sebastianqr.2208/Desktop/Status Tech/web-page/status-tech/node_modules/flatted/esm/index.js"],"sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}